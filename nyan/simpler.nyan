i2: struct {
	a: int8 ;
	b: int32;
}

usei2 func(): int32
{
	inst: i2 = undef;
	inst.b = 256;
	return 0;
}

scoping func(): int32
{
	a: int32 = 1;
	if (a == 2) {
		if (a == 1) {
			if (a == 3) {
				b: int32 = 5;
				return b;
			} else {
				return 6;
			}
		} else {
			return 4;
		}
	} else {
		return 3;
	}
}

smol func(): int32
{
	b: int8*[1] = undef;
	c: int8 = 1;
	b[0] = &c;
	*b[0] = 2;
	return c;
}

test func(p: int32[2]*): int32
{
	k: bool = (*p)[1] == 1;
	return k: int32;
}

rando func(p: int64[4]*): int64*
{
	return &(*p)[2];
}

set func(p: int64*, v: int32): int32
{
	*p = v;
	return 0;
}

ptr func(): int8
{
	a: int32 = 4;
	p: int32* = &a;
	*p = 2;
	q: int32** = &p;
	b: int32 = 6;
	*q = &b;
	c: int32 = *p;
	arr: int64[2, 4] = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 } };
	// r: int64[4]* = &arr[1];
	// u: int64* = rando(r);
	// s: int64[4]** = &r;
	// t: int64* = &(**s)[2];
	// d: int32*[2, 3] = undef;
	// d[1, 0] = *q;
	// *d[1, 0] = 9;
	// extra: int8 = *u - 7 :int8;
	// zero: int8 = set(t, *d[1, 0]): int8;
	// return (*t: int8) + zero + extra;
	return arr[1, 2]: int8;
}

ndarr func(): int32
{
	a: int32[2, 3] = { { 2, 4, 6 }, { 1, 3, 5 } };
	return a[0, 2] + a[1, 1];
}

ddef func(): int32
{
	a: int32 = 1;
	// a: int32 = 2;
	return a;
}

diffsizes func(): int32
{
	a: int8 = 9;
	b: int64 = 4294967295;
	// i: int8 = 4294967295;
	c: int32 = 6723;
	d: int64 = 1;
	e: int64 = b + d;
	h: int64 = 1 + b;
	f: int32 = a + c;
	// g: int8 = f;
	i: int8 = f: int8;
	j: int8 = (i: bool): int8;
	return f;
}

entry func() : int32
{
	z :int32 = smol();
	a :int32 = 1;
	b :int32 = 3;
	if (foo(true))
		return 1;
	arr1: int32[2] = { 2, 1 };
	arr2: int32[2] = { 1, 2 };
	arr3: int64[4] = { 9, 8, 7, 6 };
	p: int64[4]* = &arr3;
	p2: int64[4]** = &p;
	p3: int64[4]*** = &p2;
	ap: int64[4]***[2] = undef;
	ap[1] = p3;
	return uses_for(ptr()) - 28;
	return *rando(**ap[1]): int32;
	return *rando(&arr3): int32;
	return test(&arr2);
	return z;
}

uses_arr func(base: int32): int32
{
	arr: int32[4] = { 1, 2, 3, 4 };
	i: int32 = base;
	ins: int32 = 0;
	while (i < 4) {
		arr[ins] = i;
		i = i+1;
		ins = ins+1;
	}
	return arr[3];
}

uses_for func(n: int32): int32
{
	sum: int32 = 0;
	i: int32 = 1;
	while (i <= n) {
		sum = sum + i;
		i = i + 1;
	}
	return sum;
}

foo func(x: bool): bool
{
	return !x;
}

